generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id                Int        @id @default(autoincrement())
  name              String
  description       String
  priceId           String
  planprodId        String
  interval          String
  currency          String
  price             Int
  usagetype         String
  image             String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  voiceMessageLimit Int        @default(0)
  users             UserPlan[]
}

model Customer {
  id                 String @id
  stripe_customer_id String
  email              String
}

model Character {
  id                         Int             @id @default(autoincrement())
  name                       String?
  description                String?
  personality                String?
  hobby                      String?
  story                      String?
  topic                      String?
  emoji                      String?
  audio                      String?         @default("null")
  image                      String?         @default("null")
  voiceid                    String?         @default("null")
  active                     Boolean         @default(false)
  userId                     String
  avoidTopics                String?         @default("")
  explicitContent            Boolean         @default(false)
  uniqueTopics               String?         @default("")
  stripeAccountId            String?         @default("")
  stripeAccountLink          String?         @default("")
  stripeAccountLinkExpiresAt Int?            @default(0)
  user                       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  characterChat              CharacterChat[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String          @id @default(cuid())
  name              String?
  email             String?         @unique
  emailVerified     DateTime?
  image             String?
  type              String?
  voiceMessageCount Int             @default(0)
  accounts          Account[]
  character         Character[]
  minute            Minute[]
  sessions          Session[]
  characterChat     CharacterChat[]
  plan              UserPlan[]
}

model Minute {
  id       String @id @default(cuid())
  voiceamt String
  userId   String
  user     User   @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model CharacterChat {
  id          Int       @id @default(autoincrement())
  sender      String
  text        String
  userId      String    @map("user_id")
  characterId Int       @map("character_id")
  answeraudio String    @default("null")
  character   Character @relation(fields: [characterId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("character_chat")
}

model UserPlan {
  id          Int      @id @default(autoincrement())
  status      String
  interval    String
  characterId Int
  userId      String   @map("user_id")
  planId      Int      @map("plan_id")
  startAt     String
  endAt       DateTime
  updatedAt   DateTime @updatedAt
  plan        Plan     @relation(fields: [planId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@unique([userId, characterId])
  @@map("user_plan")
}
